#!/usr/bin/env python
import sys

from argparse import ArgumentParser
from os import makedirs
from os.path import exists
from emcee.utils import MPIPool

sys.path.append('..')
from src.core import *
from src.sampler import Sampler
from src.lpfsd import LPFSD
from src.lpfsr import LPFSR
from src.lpfsrr import LPFSRR
from src.lpfmr import LPFMR
from src.lpfmd import LPFMD
from src.lpfmrr import LPFMRR

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('--use-ldtk', action='store_true', default=False)
    ap.add_argument('--passband', type=str, choices=['w', 'bb', 'nb', 'K', 'Na', 'pr'])
    ap.add_argument('--pipeline', type=str, choices=['hp', 'gc'])
    ap.add_argument('--nights', type=int, choices=[1, 2, 12])
    ap.add_argument('--approach', type=str, choices=['dw','abs','dwr'], default='dw')
    ap.add_argument('--lc-type', type=str, choices=['target','relative'], default='target')
    ap.add_argument('--noise', type=str, choices=['white', 'red'])
    ap.add_argument('--mask-ingress', action='store_true', default=False)
    ap.add_argument('--n-walkers',       type=int, default=600)
    ap.add_argument('--n-threads',       type=int, default=1)
    ap.add_argument('--do-de', action='store_true', default=False)
    ap.add_argument('--do-mc', action='store_true', default=False)
    ap.add_argument('--dont-continue-de', dest='continue_de', action='store_false', default=True)
    ap.add_argument('--dont-continue-mc', dest='continue_mc', action='store_false', default=True)
    ap.add_argument('--reset-chain', action='store_true', default=True)
    ap.add_argument('--de-n-iterations',    type=int, default=1000)
    ap.add_argument('--de-save-interval',   type=int, default= 100)
    ap.add_argument('--de-update-interval', type=int, default=  10)
    ap.add_argument('--mc-n-runs',          type=int, default=   1)
    ap.add_argument('--mc-n-iterations',    type=int, default=2000)
    ap.add_argument('--mc-thin'  ,          type=int, default=  50)
    ap.add_argument('--mc-save-interval',   type=int, default= 100)
    ap.add_argument('--mc-update-interval', type=int, default=  10)
    args = ap.parse_args()

    fname_template = '{approach:s}_{pb:s}_n{nights:s}_{lctype:s}_{noise:s}_{ldtk:s}'

    fname = fname_template.format(approach=args.approach,
                                  pb=args.passband, nights=str(args.nights),
                                  lctype=args.lc_type, noise=args.noise,
                                  ldtk='ldtk' if args.use_ldtk else 'noldtk')

    resdir = join(DRESULT, 'trspec', args.pipeline)
    de_file = join(resdir, fname+'_de.fits')
    mc_file = join(resdir, fname+'_mc.fits')
    makedirs(resdir, exist_ok=True)

    de_exists = exists(de_file)
    mc_exists = exists(mc_file)

    if args.approach == 'abs':
        if args.nights == 12:
            lpf = LPFMD(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads,  pipeline=args.pipeline)
        else:
            lpf = LPFSD(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads, night=args.nights, pipeline=args.pipeline)
    elif args.approach == 'dwr':
        if args.nights == 12:
            lpf = LPFMRR(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads,  pipeline=args.pipeline)
        else:
            lpf = LPFSRR(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads, night=args.nights, pipeline=args.pipeline)
    elif args.approach == 'dw':
        if args.nights == 12:
            lpf = LPFMR(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads, pipeline=args.pipeline)
        else:
            lpf = LPFSR(args.passband, lctype=args.lc_type, use_ldtk=args.use_ldtk,
                        n_threads=args.n_threads, night=args.nights, pipeline=args.pipeline)
    else:
        raise NotImplementedError('Approach must be either abs, dw, or dwr')

    def lnposterior(pv):
        return lpf.lnposterior(pv)

    pool = MPIPool()
    if not pool.is_master():
        pool.wait()
        sys.exit(0)

    sampler = Sampler(fname, de_file, mc_file, lpf, lnposterior, args.n_walkers, mc_thin=args.mc_thin,
                      mc_nruns=args.mc_n_runs, pool=pool, notebook=False,
                      de_iupdate=args.de_update_interval, de_isave=args.de_save_interval,
                      mc_iupdate=args.mc_update_interval, mc_isave=args.mc_save_interval)

    sampler.info('Saving results to %s', relpath(fname))
    sampler.info('Run name %s', fname)
    sampler.info('Population size %i', args.n_walkers)
    
    # Differential evolution
    # ----------------------
    # DE population can either start from a) scratch, b) previous run with same noise
    # model, or c) white-noise run if running a red-noise model.
    #
    if de_exists:
        pop = Table.read(de_file).to_pandas().values
        sampler.info('Continuing DE from a previous run')
    else:
        pop = None
        sampler.info('Couldnt find DE results, forcing a DE run')
        
    if args.do_de or not de_exists:
        sampler.optimise(args.de_n_iterations, population=pop)

    # MCMC sampling
    # -------------
    if args.do_mc:
        sampler.info('Running MC with %i runs and %i iterations', args.mc_n_runs, args.mc_n_iterations)

        # Continue sampling from the previous run
        # ---------------------------------------
        if args.continue_mc and mc_exists:
            p0 = Table.read(mc_file).to_pandas().values.reshape([args.n_walkers, -1, lpf.ps.ndim])[:,-1,:]
        else:
            p0 = None
            
        sampler.sample(args.mc_n_iterations, population=p0)
 
    pool.close()
